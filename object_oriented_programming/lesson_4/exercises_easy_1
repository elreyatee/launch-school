Question 1

Which of the following are objects in Ruby? If they are objects, how can you find out what class they belong to?

  1. true
  2. "hello"
  3. [1, 2, 3, "happy days"]
  4. 142

Answer: All of these are objects in Ruby. To find what class they belong to use Object#class method, i.e true.class # => TrueClass

Question 2

If we have a Car class and a Truck class and we want to be able to go_fast, how can we add the ability for them to go_fast using the module Speed. How can you check if your Car or Truck can now go fast?

  module Speed
    def go_fast
      puts "I am a #{self.class} and going super fast!"
    end
  end

  class Car
    def go_slow
      puts "I am safe and driving slow."
    end
  end

  class Truck
    def go_very_slow
      puts "I am a heavy truck and like going very slow."
    end
  end

Answer: 

  Include the module Speed in each class: 

  module Speed
    def go_fast
      puts "I am a #{self.class} and going super fast!"
    end
  end

  class Car
    include Speed
    def go_slow
      puts "I am safe and driving slow."
    end
  end

  class Truck
    include Speed
    def go_very_slow
      puts "I am a heavy truck and like going very slow."
    end
  end

  To see if an instance of Car or Truck can go_fast:

  Car.instance_methods.include? :go_fast # => true
  Truck.instance_methods.include? :go_fast # => true

Question 3

In the last question we had a module called Speed which contained a go_fast method. We included this module in the Car class as shown below.

  module Speed
    def go_fast
      puts "I am a #{self.class} and going super fast!"
    end
  end

  class Car
    include Speed
    def go_slow
      puts "I am safe and driving slow."
    end
  end

When we called the go_fast method from an instance of the Car class (as shown below) you might have noticed that the string printed when we go fast includes the name of the type of vehicle we are using. How is this done?

  >> small_car = Car.new
  >> small_car.go_fast
  I am a Car and going super fast!

Answer: This is done because of the self keyword. Once the module is included, it is inserted immediately above the includer class' method lookup chain thus every method becomes an instance method in the includer class. Using self refers to the actual object itself or instance of Car/Truck classes. We ask self to tell us what class it belongs to, which is then interpolated in the string.

Question 4

If we have a class AngryCat how do we create a new instance of this class?

The AngryCat class might look something like this:

  class AngryCat
    def hiss
      puts "Hisssss!!!"
    end
  end

Answer: AngryCat.new

Question 5

Which of these two classes has an instance variable and how do you know?

  class Fruit
    def initialize(name)
      name = name
    end
  end

  class Pizza
    def initialize(name)
      @name = name
    end
  end

Answer: The Pizza class contains an instance variable because @name starts with the @ symbol. You can also ask an instance of each class what their instance_variables are:

  Pizza.new("pepperoni").instance_variables #=> [:@name]
  Fruit.new("orange").instance_variables # => []

Question 6

What could we add to the class below to access the instance variable @volume?

  class Cube
    def initialize(volume)
      @volume = volume
    end
  end

Answer: 

  You can 'get' the instance variable by using the Object#instance_variable_get method:

  c = Cube.new(10)
  c.instance_variable_get('@volume') # => 10

  A better way would be to add a public interface or getter method:

  class Cube
    def initialize(volume)
      @volume = volume
    end

    def volume
      @volume
    end
  end

  c = Cube.new(10)
  c.volume # => 10

  This could easily be accomplished by using the class macro attr_reader:

  class Cube
    attr_reader

    def initialize(volume)
      @volume
    end
  end

Question 7

What is the default thing that Ruby will print to the screen if you call to_s on an object? Where could you go to find out if you want to be sure?

Answer: this returns a string representation of the object. By default to_s prints the object's class and encoding of the object's id.

  class MyClass
    def to_s
      super
    end
  end

  MyClass.new.to_s # => "#<MyClass:0x007fbbc0993120>"

Question 8

If we have a class such as the one below:

  class Cat
    attr_accessor :type, :age

    def initialize(type)
      @type = type
      @age  = 0
    end

    def make_one_year_older
      self.age += 1
    end
  end

You can see in the make_one_year_older method we have used self. What does self refer to here?

Answer: self refers to the actual Cat instance itself. To be more specific, using self is calling instance method age= which uses reassignment to increment @age by 1.

Question 9

If we have a class such as the one below:

  class Cat
    @@cats_count = 0

    def initialize(type)
      @type = type
      @age  = 0
      @@cats_count += 1
    end

    def self.cats_count
      @@cats_count
    end
  end

In the name of the cats_count method we have used self. What does self refer to in this context? 

Answer: self refers to the Cat class ... this is a class method, a getter method for the @@cats_count class variable.

Question 10

If we have the class below, what would you need to call to create a new instance of this class.

  class Bag
    def initialize(color, material)
      @color = color
      @material = material
    end
  end

Answer: Bag.new('some_color', 'some_material')
