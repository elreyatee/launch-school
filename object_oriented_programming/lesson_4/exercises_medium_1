Question 1

Ben asked Alyssa to code review the following code:

  class BankAccount
    attr_reader :balance

    def initialize(starting_balance)
      @balance = starting_balance
    end

    def positive_balance?
      balance >= 0
    end
  end

Alyssa glanced over the code quickly and said - "It looks fine, except that you forgot to put the @ before balance when you refer to the balance instance variable in the body of the positive_balance? method."

"Not so fast", Ben replied. "What I'm doing here is valid - I'm not missing an @!"

Who is right, Ben or Alyssa, and why?

Answer:  Ben is correct because the positive_balance? method is using the getter method for balance, created by the attr_reader :balance class macro.

Question 2

Alyssa created the following code to keep track of items for a shopping cart application she's writing:

  class InvoiceEntry
    attr_reader :quantity, :product_name

    def initialize(product_name, number_purchased)
      @quantity = number_purchased
      @product_name = product_name
    end

    def update_quantity(updated_count)
      # prevent negative quantities from being set
      quantity = updated_count if updated_count >= 0
    end
  end

Alan looked at the code and spotted a mistake. "This will fail when update_quantity is called", he says.

Can you spot the mistake and how to address it?

Answer: The problem is the class macro for quantity is a getter method, not a setter method. So, when update_quantity is called, a local variable called quantity will be assigned the value of updated_count, the passed in method argument.

  class InvoiceEntry
    attr_accessor :quantity
    attr_reader :product_name

    def initialize(product_name, number_purchased)
      @quantity = number_purchased
      @product_name = product_name
    end

    def update_quantity(updated_count)
      # prevent negative quantities from being set
      quantity = updated_count if updated_count >= 0
    end
  end

Question 3

In the last question Alyssa showed Alan this code which keeps track of items for a shopping cart application:

class InvoiceEntry
  attr_reader :quantity, :product_name

  def initialize(product_name, number_purchased)
    @quantity = number_purchased
    @product_name = product_name
  end

  def update_quantity(updated_count)
    quantity = updated_count if updated_count >= 0
  end
end

Alan noticed that this will fail when update_quantity is called. Since quantity is an instance variable, it must be accessed with the @quantity notation when setting it. One way to fix this to change attr_reader to attr_accessor.

Is there anything wrong with fixing it this way?

Answer: 

There's nothing technically wrong with this but you are exposing a way to change the value of the instance variable quantity which may not be intended.

Question 4

Let's practice creating an object hierarchy.

Create a class called Greeting with a single method called greet that takes a string argument and prints that argument to the terminal.

Now create two other classes that are derived from Greeting: one called Hello and one called Goodbye. The Hello class should have a hi method that takes no arguments and prints "Hello". The Goodbye class should have a bye method to say "Goodbye". Make use of the Greeting class greet method when implementing the Hello and Goodbye classes - do not use any puts in the Hello or Goodbye classes.

Answer: 

class Greeting
  def greet(string)
    puts string
  end
end

class Hello < Greeting
  def hi
    greet("Hello")
  end
end

class Goodbye < Greeting
  def bye
    greet("Goodbye")
  end
end

Question 5

You are given the following class that has been implemented:

class KrispyKreme
  def initialize(filling_type, glazing)
    @filling_type = filling_type
    @glazing = glazing
  end
end

And the following specification of expected behavior:

donut1 = KrispyKreme.new(nil, nil)
donut2 = KrispyKreme.new("Vanilla", nil)
donut3 = KrispyKreme.new(nil, "sugar")
donut4 = KrispyKreme.new(nil, "chocolate sprinkles")
donut5 = KrispyKreme.new("Custard", "icing")

puts donut1
  => "Plain"

puts donut2
  => "Vanilla"

puts donut3
  => "Plain with sugar"

puts donut4
  => "Plain with chocolate sprinkles"

puts donut5
  => "Custard with icing"

Write additional code for KrispyKreme such that the puts statements will work as specified above.

Answer: 

class KrispyKreme
  attr_reader :filling_type, :glazing

  def initialize(filling_type, glazing)
    @filling_type = filling_type
    @glazing = glazing
  end

  def to_s
    filling = filling_type ? filling_type : "Plain"
    glaze = glazing ? " with #{glazing}" : ''
    filling + glaze
  end
end

Question 6

If we have these two methods:

class Computer
  attr_accessor :template

  def create_template
    @template = "template 14231"
  end

  def show_template
    template
  end
end

and

class Computer
  attr_accessor :template

  def create_template
    self.template = "template 14231"
  end

  def show_template
    self.template
  end
end

What is the difference in the way the code works?

Answer: 

In the first code example, in the create_template method, instead of using the setter method, we are assigning a string value to the @template instance variable explicitly.  However, in the show_template method, we are using the template getter method. In the second code example, the create_template and show_template methods are referring to the instance itself using the self keyword and calling the setter and getter method defined in the class macro respectively. 

Question 7

How could you change the method name below so that the method name is more clear and less repetitive.

class Light
  attr_accessor :brightness, :color

  def initialize(brightness, color)
    @brightness = brightness
    @color = color
  end

  def self.light_information
    "I want to turn on the light with a brightness level of super high and a colour of green"
  end
end

Answer: 

class Light
  attr_accessor :brightness, :color

  def initialize(brightness, color)
    @brightness = brightness
    @color = color
  end

  def self.information
    "I want to turn on the light with a brightness level of super high and a colour of green"
  end
end

